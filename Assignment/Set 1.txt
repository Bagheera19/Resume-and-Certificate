#include <stdio.h>
#include <stdbool.h>

#define MAXN 100005

int parent[MAXN];

// Find operation for disjoint set
int find(int u) {
    if (parent[u] != u) {
        parent[u] = find(parent[u]);
    }
    return parent[u];
}

// Union operation for disjoint set
void union_set(int u, int v) {
    int parent_u = find(u);
    int parent_v = find(v);
    parent[parent_v] = parent_u;
}

int makeConnected(int n, int** connections, int connectionsSize, int* connectionsColSize) {
    if (connectionsSize < n - 1) {
        return -1;
    }
    
    // Initializing the parent array for disjoint set
    for (int i = 0; i < n; i++) {
        parent[i] = i;
    }
    
    // Union operation on all connected workstations
    for (int i = 0; i < connectionsSize; i++) {
        union_set(connections[i][0], connections[i][1]);
    }
    
    int components = 0;
    
    // Counting the number of connected components
    for (int i = 0; i < n; i++) {
        if (parent[i] == i) {
            components++;
        }
    }
    
    // Minimum number of cables required to connect all workstations
    int cables = connectionsSize - (n - components);
    
    if (components > 1) {
        // If there are more than one connected components, we can join them
        // by adding cables between any two disconnected components
        return cables + (components - 1);
    } else {
        return cables;
    }
}

int main() {
    int n = 4;
    int connectionsSize = 3;
    int connectionsColSize = 2;
    int** connections = (int**) malloc(connectionsSize * sizeof(int*));
    for (int i = 0; i < connectionsSize; i++) {
        connections[i] = (int*) malloc(connectionsColSize * sizeof(int));
    }
    connections[0][0] = 0;
    connections[0][1] = 1;
    connections[1][0] = 0;
    connections[1][1] = 2;
    connections[2][0] = 1;
    connections[2][1] = 2;
    int ans = makeConnected(n, connections, connectionsSize, &connectionsColSize);
    printf("%d\n", ans);
    return 0;
}

// ====================================================================

// Output

// 1